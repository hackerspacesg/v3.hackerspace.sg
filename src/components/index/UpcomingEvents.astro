---
import { Icon } from 'astro-icon/components';
import { parseICS } from '@/utils/iCalParser.ts';
import {
  formatSGTDateTime,
  isTentative,
  getEmoji,
} from '@/utils/eventHelpers.ts';
import { iCalUrl } from '@/config.index.ts';

interface CalendarEvent {
  summary: string;
  start: Date;
  end: Date;
  description?: string;
  url?: string;
}

let events: CalendarEvent[] = [];

try {
  const res = await fetch(iCalUrl);
  if (res.ok) {
    const icalData = await res.text();
    events = parseICS(icalData)
      .filter((event) => event.start > new Date())
      .sort((a, b) => a.start.getTime() - b.start.getTime());
  } else {
    console.error('Failed to fetch ical file.');
  }
} catch (error) {
  console.error('Error fetching or parsing the ical file:', error);
}
---

<div
  class="max-h-[30rem] overflow-y-auto rounded-lg bg-white p-6 shadow-md dark:bg-zinc-800">
  <h2
    class="mb-4 flex items-center text-2xl font-bold text-zinc-800 dark:text-zinc-100">
    <Icon name="lucide:calendar" class="mr-2 h-8 w-8 text-red-600" />
    Upcoming Events
  </h2>
  <ul class="space-y-4" id="event-list">
    {
      events.map((event) => {
        const urlMatch = event.description?.match(
          /URL:\s*(https?:\/\/[^\s]+)/i,
        );
        const eventUrl = urlMatch ? urlMatch[1] : null;
        const categoryEmoji = getEmoji(event.summary, event.description);
        const formattedSGT = formatSGTDateTime(new Date(event.start));
        const isEventTentative = isTentative(event.summary);

        return (
          <li
            class={`flex items-start rounded-lg p-4 shadow-md transition ${isEventTentative ? 'opacity-50' : 'bg-zinc-50 hover:bg-zinc-100 dark:bg-zinc-700 dark:hover:bg-zinc-600'}`}>
            <div class="w-24 flex-shrink-0 text-center">
              <div class="text-lg font-bold text-zinc-800 dark:text-zinc-200">
                {new Date(event.start).toLocaleDateString('en-US', {
                  timeZone: 'Asia/Singapore',
                  month: 'short',
                  day: 'numeric',
                })}
              </div>
              <div class="text-sm text-zinc-600 dark:text-zinc-400">
                {new Date(event.start).toLocaleTimeString('en-US', {
                  timeZone: 'Asia/Singapore',
                  hour: 'numeric',
                  minute: 'numeric',
                  hour12: true,
                })}
              </div>
            </div>
            <div class="ml-4 flex-grow">
              <h3
                class="text-lg font-semibold dark:text-white"
                title={formattedSGT}>
                {eventUrl ? (
                  <a
                    href={eventUrl}
                    target="_blank"
                    rel="nofollow"
                    class="text-blue-500 hover:underline">
                    {event.summary} {categoryEmoji}
                  </a>
                ) : (
                  <>
                    {event.summary} {categoryEmoji}
                  </>
                )}
              </h3>
              <p
                class="event-relative-time mt-1 text-sm text-zinc-600 dark:text-zinc-400"
                data-start-time={new Date(event.start).toISOString()}
                title={formattedSGT}
              />
            </div>
          </li>
        );
      })
    }
  </ul>
</div>

<script>
  import { updateRelativeTimes } from '@/utils/eventHelpers.ts';

  if (typeof window !== 'undefined') {
    updateRelativeTimes();

    setInterval(updateRelativeTimes, 60000);
  }
</script>
